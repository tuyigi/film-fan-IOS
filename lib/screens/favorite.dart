import 'dart:convert';import 'package:film_fan_ios/configs/config.dart';import 'package:film_fan_ios/models/detailsMovie.dart';import 'package:film_fan_ios/screens/details.dart';import 'package:flutter_rating_bar/flutter_rating_bar.dart';import 'package:http/http.dart' as http;import 'package:film_fan_ios/models/movie.dart';import 'package:flutter/material.dart';class Favorite extends StatefulWidget{  @override  State<StatefulWidget> createState() {    // TODO: implement createState    return _favorite();  }}class _favorite extends State<Favorite>{  late Future<List<Movie>> favoriteMovies;  // parse product  List<Movie> parseProducts(String responseBody) {    final body = json.decode(responseBody);    final res=body['results'];    final parsed =res.cast<Map<String, dynamic>>();    return parsed.map<Movie>((json) =>Movie.fromMap(json)).toList();  }  // fetch movie  Future<List<Movie>> fetchMovies() async {    setState(() {      isLoadingMovie=true;    });    final response = await http.get(Uri.parse(config.NOW_PLAYING+"?api_key="+config.API_KEY+"&language=en-US&page=1"));    if (response.statusCode == 200) {      final body = json.decode(response.body);      print("results");      print(body['results']);      setState(() {        isLoadingMovie=false;      });      String res=body['results'].toString();      return parseProducts(response.body);    } else {      throw Exception('Failed to parse movies');    }  }  bool isLoadingMovie=false;  Config config=new Config();  @override  void initState() {    // TODO: implement initState    super.initState();    favoriteMovies=fetchMovies();  }  @override  Widget build(BuildContext context) {    double c_width = MediaQuery.of(context).size.width*0.5;    // TODO: implement build    return Scaffold(appBar: AppBar(title: Text("Favorite Movie"),),      body: SingleChildScrollView(child:  FutureBuilder<List<Movie>>(          future:favoriteMovies,          builder: (context, snapshot) {            if (snapshot.hasData) {              return                ListView(                    scrollDirection: Axis.vertical,                    shrinkWrap: true,                    physics: NeverScrollableScrollPhysics(),                    children: snapshot.data!.map((v) =>                        GestureDetector(onTap: (){                          DetailsMovie movieId=new DetailsMovie(id:v.id,title: v.title,poster_path: v.poster_path,vote_average: v.vote_average,overview: v.overview,popularity: v.popularity,release_date: v.release_date);                          Navigator.push(                            context,                            MaterialPageRoute(                                builder: (context) =>Details(DetailsMovie:movieId)),                          );                        },child: Padding(                            padding: EdgeInsets.only(bottom: 5),                            child:                            Row(crossAxisAlignment: CrossAxisAlignment.start,children: [                              Padding(padding: EdgeInsets.only(left: 5),child: Image.network(config.BASE_URL_IMAGE+v.poster_path,height: 200,)),                              Padding(padding:EdgeInsets.only(left: 5,top: 5) ,child: Container (                                width: c_width,                                child: new Column (                                  crossAxisAlignment: CrossAxisAlignment.start,                                  children: <Widget>[                                    Text (v.title, textAlign: TextAlign.left,style: TextStyle(fontWeight: FontWeight.bold,fontSize: 18),),                                    Row(children: [                                      Icon(Icons.people_outline),                                      Padding(padding: EdgeInsets.only(left: 3,top: 5),child: Text (v.popularity.toString(), textAlign: TextAlign.left)),                                    ],),                                    RatingBar.builder(                                        initialRating: v.vote_average/2,                                        minRating: 1,                                        direction: Axis.horizontal,                                        allowHalfRating: true,                                        ignoreGestures: true,                                        itemCount: 5,                                        itemPadding: EdgeInsets.symmetric(vertical: 4.0),                                        itemBuilder: (context, _) => Icon(                                          Icons.star,                                          color: Colors.amber,                                        ),                                        onRatingUpdate: (rating) {                                        },                                        itemSize:25                                    )                                  ],                                ),                              ))                            ],                            )))).toList()                );            }else{              return Center(child: CircularProgressIndicator(valueColor: new AlwaysStoppedAnimation<Color>(Colors.red)),);            }          }      )),);  }}